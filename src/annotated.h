// Generated by Molecule 0.5.0

#define MOLECULEC_VERSION 5000
#define MOLECULE_API_VERSION_MIN 5000

#include "molecule_reader_streaming.h"

#ifndef ANNOTATED_H
#define ANNOTATED_H

#ifdef __cplusplus
#define _CPP_BEGIN extern "C" {
#define _CPP_END }
_CPP_BEGIN
#endif /* __cplusplus */

#ifndef MOLECULE_API_DECORATOR
#define __DEFINE_MOLECULE_API_DECORATOR_ANNOTATED
#define MOLECULE_API_DECORATOR
#endif /* MOLECULE_API_DECORATOR */

#include "blockchain.h"

/*
 * Reader APIs
 */

struct AnnotatedCellInput_state {
    mol_num_t state_num;
    mol_num_t field_idx;
    mol_num_t total_size;
    mol_num_t input_offset;
    mol_num_t source_offset;
    union {
        struct CellInput_state input;
        struct RawTransaction_state source;
        struct num_state num;
    } u;
};
struct AnnotatedCellInput_callbacks {
    void (*start)();
    void (*chunk)(uint8_t*, mol_num_t);
    void (*end)();
    void (*offsets)(struct AnnotatedCellInput_state*);
    const struct CellInput_callbacks *input;
    const struct RawTransaction_callbacks *source;
};

struct AnnotatedCellInputVec_state {
    mol_num_t state_num;
    mol_num_t field_idx;
    mol_num_t total_size;
    mol_num_t first_offset;
    union { struct AnnotatedCellInput_state item; struct num_state num;} u;
};
struct AnnotatedCellInputVec_callbacks {
    void (*start)();
    void (*chunk)(uint8_t*, mol_num_t);
    void (*end)();
    void (*size)(mol_num_t);
    void (*length)(mol_num_t);
    void (*index)(mol_num_t);
    void (*offset)(mol_num_t);
    const struct AnnotatedCellInput_callbacks *item;
};

struct AnnotatedRawTransaction_state {
    mol_num_t state_num;
    mol_num_t field_idx;
    mol_num_t total_size;
    mol_num_t version_offset;
    mol_num_t cell_deps_offset;
    mol_num_t header_deps_offset;
    mol_num_t inputs_offset;
    mol_num_t outputs_offset;
    mol_num_t outputs_data_offset;
    union {
        struct Uint32_state version;
        struct CellDepVec_state cell_deps;
        struct Byte32Vec_state header_deps;
        struct AnnotatedCellInputVec_state inputs;
        struct CellOutputVec_state outputs;
        struct BytesVec_state outputs_data;
        struct num_state num;
    } u;
};
struct AnnotatedRawTransaction_callbacks {
    void (*start)();
    void (*chunk)(uint8_t*, mol_num_t);
    void (*end)();
    void (*offsets)(struct AnnotatedRawTransaction_state*);
    const struct Uint32_callbacks *version;
    const struct CellDepVec_callbacks *cell_deps;
    const struct Byte32Vec_callbacks *header_deps;
    const struct AnnotatedCellInputVec_callbacks *inputs;
    const struct CellOutputVec_callbacks *outputs;
    const struct BytesVec_callbacks *outputs_data;
};

struct Bip32_state {
    mol_num_t state_num;
    mol_num_t length;
    union { struct Uint32_state item; struct num_state num;} u;
};
struct Bip32_callbacks {
    void (*start)();
    void (*chunk)(uint8_t*, mol_num_t);
    void (*end)();
    void (*size)(mol_num_t);
    void (*index)(mol_num_t);
    const struct Uint32_callbacks *item;
};

MOLECULE_API_DECORATOR  void            MolReader_Bip32_init_state                      (struct Bip32_state *s, const struct Bip32_callbacks *cb) {
    if(cb && cb->start) MOL_PIC(cb->start)();
    s->state_num=0;
    MOL_INIT_NUM();
}
struct AnnotatedTransaction_state {
    mol_num_t state_num;
    mol_num_t field_idx;
    mol_num_t total_size;
    mol_num_t signPath_offset;
    mol_num_t changePath_offset;
    mol_num_t inputCount_offset;
    mol_num_t raw_offset;
    mol_num_t witnesses_offset;
    union {
        struct Bip32_state signPath;
        struct Bip32_state changePath;
        struct Uint32_state inputCount;
        struct AnnotatedRawTransaction_state raw;
        struct BytesVec_state witnesses;
        struct num_state num;
    } u;
};
struct AnnotatedTransaction_callbacks {
    void (*start)();
    void (*chunk)(uint8_t*, mol_num_t);
    void (*end)();
    void (*offsets)(struct AnnotatedTransaction_state*);
    const struct Bip32_callbacks *signPath;
    const struct Bip32_callbacks *changePath;
    const struct Uint32_callbacks *inputCount;
    const struct AnnotatedRawTransaction_callbacks *raw;
    const struct BytesVec_callbacks *witnesses;
};

struct AnnotatedCellInput_state;
struct AnnotatedCellInput_callbacks;
typedef const struct AnnotatedCellInput_callbacks AnnotatedCellInput_cb;
MOLECULE_API_DECORATOR  void            MolReader_AnnotatedCellInput_init_state         (struct AnnotatedCellInput_state *s, const struct AnnotatedCellInput_callbacks *cb);
MOLECULE_API_DECORATOR  mol_rv          MolReader_AnnotatedCellInput_parse              (struct AnnotatedCellInput_state *s, struct mol_chunk *chunk, const struct AnnotatedCellInput_callbacks *cb, mol_num_t size);

struct AnnotatedCellInputVec_state;
struct AnnotatedCellInputVec_callbacks;
typedef const struct AnnotatedCellInputVec_callbacks AnnotatedCellInputVec_cb;
MOLECULE_API_DECORATOR  void            MolReader_AnnotatedCellInputVec_init_state      (struct AnnotatedCellInputVec_state *s, const struct AnnotatedCellInputVec_callbacks *cb);
MOLECULE_API_DECORATOR  mol_rv          MolReader_AnnotatedCellInputVec_parse           (struct AnnotatedCellInputVec_state *s, struct mol_chunk *chunk, const struct AnnotatedCellInputVec_callbacks *cb, mol_num_t size);

struct AnnotatedRawTransaction_state;
struct AnnotatedRawTransaction_callbacks;
typedef const struct AnnotatedRawTransaction_callbacks AnnotatedRawTransaction_cb;
MOLECULE_API_DECORATOR  void            MolReader_AnnotatedRawTransaction_init_state    (struct AnnotatedRawTransaction_state *s, const struct AnnotatedRawTransaction_callbacks *cb);
MOLECULE_API_DECORATOR  mol_rv          MolReader_AnnotatedRawTransaction_parse         (struct AnnotatedRawTransaction_state *s, struct mol_chunk *chunk, const struct AnnotatedRawTransaction_callbacks *cb, mol_num_t size);

struct Bip32_state;
struct Bip32_callbacks;
typedef const struct Bip32_callbacks Bip32_cb;
MOLECULE_API_DECORATOR  void            MolReader_Bip32_init_state                      (struct Bip32_state *s, const struct Bip32_callbacks *cb);
MOLECULE_API_DECORATOR  mol_rv          MolReader_Bip32_parse                           (struct Bip32_state *s, struct mol_chunk *chunk, const struct Bip32_callbacks *cb, mol_num_t size);

struct AnnotatedTransaction_state;
struct AnnotatedTransaction_callbacks;
typedef const struct AnnotatedTransaction_callbacks AnnotatedTransaction_cb;
MOLECULE_API_DECORATOR  void            MolReader_AnnotatedTransaction_init_state       (struct AnnotatedTransaction_state *s, const struct AnnotatedTransaction_callbacks *cb);
MOLECULE_API_DECORATOR  mol_rv          MolReader_AnnotatedTransaction_parse            (struct AnnotatedTransaction_state *s, struct mol_chunk *chunk, const struct AnnotatedTransaction_callbacks *cb, mol_num_t size);


#undef ____

/*
 * Reader Functions
 */

MOLECULE_API_DECORATOR  void            MolReader_AnnotatedCellInput_init_state         (struct AnnotatedCellInput_state *s, const struct AnnotatedCellInput_callbacks *cb) {
    if(cb && cb->start) MOL_PIC(cb->start)();
    s->state_num=0;
    s->field_idx=0;
    MOL_INIT_NUM();
}

MOLECULE_API_DECORATOR  mol_rv          MolReader_AnnotatedCellInput_parse              (struct AnnotatedCellInput_state *s, struct mol_chunk *chunk, const struct AnnotatedCellInput_callbacks *cb, mol_num_t size) {
    mol_num_t start_idx = chunk->consumed;
    // Table
    switch(s->state_num) {
        case 0:
            MOL_CALL_NUM(s->total_size);
            MOL_INIT_NUM();
            if(size!=MOL_NUM_MAX && s->total_size != size) return REJECT;
            s->state_num++;
        case 1:
            switch(s->field_idx) {
                case 0: {
                    MOL_CALL_NUM(s->input_offset);
                    MOL_INIT_NUM();
                    s->field_idx++;
                }
                case 1: {
                    MOL_CALL_NUM(s->source_offset);
                    MOL_INIT_NUM();
                    s->field_idx++;
                }
            }
            s->state_num++;
            s->field_idx=0;
            MOL_INIT_SUBPARSER(input, CellInput);
            if(cb && cb->offsets) MOL_PIC(cb->offsets)(s);
        case 2:
            switch(s->field_idx) {
            case 0: {
                MOL_CALL_SUBPARSER(input, CellInput, s->source_offset - s->input_offset);
                MOL_INIT_SUBPARSER(source, RawTransaction);
                s->field_idx++;
            }
            case 1: {
                MOL_CALL_SUBPARSER(source, RawTransaction, s->total_size-s->source_offset);
                s->state_num++;
            }
        }
    }
    if(cb && cb->chunk) MOL_PIC(cb->chunk)(chunk->ptr + start_idx, chunk->consumed - start_idx);
    if(cb && cb->end) MOL_PIC(cb->end)();
    return COMPLETE;
}
MOLECULE_API_DECORATOR  void            MolReader_AnnotatedCellInputVec_init_state      (struct AnnotatedCellInputVec_state *s, const struct AnnotatedCellInputVec_callbacks *cb) {
    if(cb && cb->start) MOL_PIC(cb->start)();
    s->state_num=0;
    s->field_idx=0;
    MOL_INIT_NUM();
}

MOLECULE_API_DECORATOR  mol_rv          MolReader_AnnotatedCellInputVec_parse           (struct AnnotatedCellInputVec_state *s, struct mol_chunk *chunk, const struct AnnotatedCellInputVec_callbacks *cb, mol_num_t size) {
    mol_num_t start_idx = chunk->consumed;
    // DynVec
    (void)(size); // FIXME: check sizes.
    switch(s->state_num) {
        case 0:
            MOL_CALL_NUM(s->total_size);
            MOL_INIT_NUM();
            if(cb && cb->size) MOL_PIC(cb->size)(s->total_size);
            if(s->total_size==4) {
    if(cb && cb->chunk) MOL_PIC(cb->chunk)(chunk->ptr + start_idx, chunk->consumed - start_idx);
    if(cb && cb->end) MOL_PIC(cb->end)();
    return COMPLETE;
            }
            if(size != MOL_NUM_MAX && size != s->total_size) return REJECT;
            s->state_num++;
        case 1:
            MOL_CALL_NUM(s->first_offset);
            MOL_INIT_NUM();
            s->field_idx=1;
            s->state_num++;
        case 2:
            while(s->field_idx < (s->first_offset>>2)-1) {
                mol_num_t scratch;
                MOL_CALL_NUM(scratch);
                MOL_INIT_NUM();
                s->field_idx++;
            }
            MOL_INIT_SUBPARSER(item, AnnotatedCellInput)
            s->field_idx=0;
            s->state_num++;
            if(cb && cb->length) MOL_PIC(cb->length)((s->first_offset>>2)-1);
            if(cb && cb->index) MOL_PIC(cb->index)(s->field_idx);
        case 3:
            while(s->field_idx < (s->first_offset>>2)-1) {
                MOL_CALL_SUBPARSER(item, AnnotatedCellInput, -1)
                MOL_INIT_SUBPARSER(item, AnnotatedCellInput)
                s->field_idx++;
                if(cb && cb->index) MOL_PIC(cb->index)(s->field_idx);
            }
    }
    if(cb && cb->chunk) MOL_PIC(cb->chunk)(chunk->ptr + start_idx, chunk->consumed - start_idx);
    if(cb && cb->end) MOL_PIC(cb->end)();
    return COMPLETE;
}
MOLECULE_API_DECORATOR  void            MolReader_AnnotatedRawTransaction_init_state    (struct AnnotatedRawTransaction_state *s, const struct AnnotatedRawTransaction_callbacks *cb) {
    if(cb && cb->start) MOL_PIC(cb->start)();
    s->state_num=0;
    s->field_idx=0;
    MOL_INIT_NUM();
}

MOLECULE_API_DECORATOR  mol_rv          MolReader_AnnotatedRawTransaction_parse         (struct AnnotatedRawTransaction_state *s, struct mol_chunk *chunk, const struct AnnotatedRawTransaction_callbacks *cb, mol_num_t size) {
    mol_num_t start_idx = chunk->consumed;
    // Table
    switch(s->state_num) {
        case 0:
            MOL_CALL_NUM(s->total_size);
            MOL_INIT_NUM();
            if(size!=MOL_NUM_MAX && s->total_size != size) return REJECT;
            s->state_num++;
        case 1:
            switch(s->field_idx) {
                case 0: {
                    MOL_CALL_NUM(s->version_offset);
                    MOL_INIT_NUM();
                    s->field_idx++;
                }
                case 1: {
                    MOL_CALL_NUM(s->cell_deps_offset);
                    MOL_INIT_NUM();
                    s->field_idx++;
                }
                case 2: {
                    MOL_CALL_NUM(s->header_deps_offset);
                    MOL_INIT_NUM();
                    s->field_idx++;
                }
                case 3: {
                    MOL_CALL_NUM(s->inputs_offset);
                    MOL_INIT_NUM();
                    s->field_idx++;
                }
                case 4: {
                    MOL_CALL_NUM(s->outputs_offset);
                    MOL_INIT_NUM();
                    s->field_idx++;
                }
                case 5: {
                    MOL_CALL_NUM(s->outputs_data_offset);
                    MOL_INIT_NUM();
                    s->field_idx++;
                }
            }
            s->state_num++;
            s->field_idx=0;
            MOL_INIT_SUBPARSER(version, Uint32);
            if(cb && cb->offsets) MOL_PIC(cb->offsets)(s);
        case 2:
            switch(s->field_idx) {
            case 0: {
                MOL_CALL_SUBPARSER(version, Uint32, s->cell_deps_offset - s->version_offset);
                MOL_INIT_SUBPARSER(cell_deps, CellDepVec);
                s->field_idx++;
            }
            case 1: {
                MOL_CALL_SUBPARSER(cell_deps, CellDepVec, s->header_deps_offset - s->cell_deps_offset);
                MOL_INIT_SUBPARSER(header_deps, Byte32Vec);
                s->field_idx++;
            }
            case 2: {
                MOL_CALL_SUBPARSER(header_deps, Byte32Vec, s->inputs_offset - s->header_deps_offset);
                MOL_INIT_SUBPARSER(inputs, AnnotatedCellInputVec);
                s->field_idx++;
            }
            case 3: {
                MOL_CALL_SUBPARSER(inputs, AnnotatedCellInputVec, s->outputs_offset - s->inputs_offset);
                MOL_INIT_SUBPARSER(outputs, CellOutputVec);
                s->field_idx++;
            }
            case 4: {
                MOL_CALL_SUBPARSER(outputs, CellOutputVec, s->outputs_data_offset - s->outputs_offset);
                MOL_INIT_SUBPARSER(outputs_data, BytesVec);
                s->field_idx++;
            }
            case 5: {
                MOL_CALL_SUBPARSER(outputs_data, BytesVec, s->total_size-s->outputs_data_offset);
                s->state_num++;
            }
        }
    }
    if(cb && cb->chunk) MOL_PIC(cb->chunk)(chunk->ptr + start_idx, chunk->consumed - start_idx);
    if(cb && cb->end) MOL_PIC(cb->end)();
    return COMPLETE;
}
MOLECULE_API_DECORATOR  mol_rv          MolReader_Bip32_parse                           (struct Bip32_state *s, struct mol_chunk *chunk, const struct Bip32_callbacks *cb, mol_num_t size) {
    mol_num_t start_idx = chunk->consumed;
    if(s->state_num == 0) {
        MOL_CALL_NUM(s->length);
        s->state_num++;
        if(size != MOL_NUM_MAX && (s->length * 4 + 4) != size) return REJECT;
        if(cb && cb->size) MOL_PIC(cb->size)(s->length * 4 + 4);
        MOL_INIT_SUBPARSER(item, Uint32);
        if(cb && cb->index) MOL_PIC(cb->index)(s->state_num-1);
    }
    while(s->state_num-1 < s->length) {
        MOL_CALL_SUBPARSER(item, Uint32, 4);
        MOL_INIT_SUBPARSER(item, Uint32);
        s->state_num++;
        if(cb && cb->index) MOL_PIC(cb->index)(s->state_num-1);
    }
    DONE();
}
MOLECULE_API_DECORATOR  void            MolReader_AnnotatedTransaction_init_state       (struct AnnotatedTransaction_state *s, const struct AnnotatedTransaction_callbacks *cb) {
    if(cb && cb->start) MOL_PIC(cb->start)();
    s->state_num=0;
    s->field_idx=0;
    MOL_INIT_NUM();
}

MOLECULE_API_DECORATOR  mol_rv          MolReader_AnnotatedTransaction_parse            (struct AnnotatedTransaction_state *s, struct mol_chunk *chunk, const struct AnnotatedTransaction_callbacks *cb, mol_num_t size) {
    mol_num_t start_idx = chunk->consumed;
    // Table
    switch(s->state_num) {
        case 0:
            MOL_CALL_NUM(s->total_size);
            MOL_INIT_NUM();
            if(size!=MOL_NUM_MAX && s->total_size != size) return REJECT;
            s->state_num++;
        case 1:
            switch(s->field_idx) {
                case 0: {
                    MOL_CALL_NUM(s->signPath_offset);
                    MOL_INIT_NUM();
                    s->field_idx++;
                }
                case 1: {
                    MOL_CALL_NUM(s->changePath_offset);
                    MOL_INIT_NUM();
                    s->field_idx++;
                }
                case 2: {
                    MOL_CALL_NUM(s->inputCount_offset);
                    MOL_INIT_NUM();
                    s->field_idx++;
                }
                case 3: {
                    MOL_CALL_NUM(s->raw_offset);
                    MOL_INIT_NUM();
                    s->field_idx++;
                }
                case 4: {
                    MOL_CALL_NUM(s->witnesses_offset);
                    MOL_INIT_NUM();
                    s->field_idx++;
                }
            }
            s->state_num++;
            s->field_idx=0;
            MOL_INIT_SUBPARSER(signPath, Bip32);
            if(cb && cb->offsets) MOL_PIC(cb->offsets)(s);
        case 2:
            switch(s->field_idx) {
            case 0: {
                MOL_CALL_SUBPARSER(signPath, Bip32, s->changePath_offset - s->signPath_offset);
                MOL_INIT_SUBPARSER(changePath, Bip32);
                s->field_idx++;
            }
            case 1: {
                MOL_CALL_SUBPARSER(changePath, Bip32, s->inputCount_offset - s->changePath_offset);
                MOL_INIT_SUBPARSER(inputCount, Uint32);
                s->field_idx++;
            }
            case 2: {
                MOL_CALL_SUBPARSER(inputCount, Uint32, s->raw_offset - s->inputCount_offset);
                MOL_INIT_SUBPARSER(raw, AnnotatedRawTransaction);
                s->field_idx++;
            }
            case 3: {
                MOL_CALL_SUBPARSER(raw, AnnotatedRawTransaction, s->witnesses_offset - s->raw_offset);
                MOL_INIT_SUBPARSER(witnesses, BytesVec);
                s->field_idx++;
            }
            case 4: {
                MOL_CALL_SUBPARSER(witnesses, BytesVec, s->total_size-s->witnesses_offset);
                s->state_num++;
            }
        }
    }
    if(cb && cb->chunk) MOL_PIC(cb->chunk)(chunk->ptr + start_idx, chunk->consumed - start_idx);
    if(cb && cb->end) MOL_PIC(cb->end)();
    return COMPLETE;
}

#ifdef __DEFINE_MOLECULE_API_DECORATOR_ANNOTATED
#undef MOLECULE_API_DECORATOR
#undef __DEFINE_MOLECULE_API_DECORATOR_ANNOTATED
#endif /* __DEFINE_MOLECULE_API_DECORATOR_ANNOTATED */

#ifdef __cplusplus
_CPP_END
#undef _CPP_BEGIN
#undef _CPP_END
#endif /* __cplusplus */

#endif /* ANNOTATED_H */
